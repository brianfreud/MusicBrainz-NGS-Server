#!/usr/bin/perl -w
# vi: set ts=4 sw=4 :

unshift @INC, sub {
	my $file = $_[1];
	my $msg = "require $file";
	for (my $i = 0; my @c = caller($i); ++$i)
	{
		$msg .= "\n\tcalled from $c[0] ($c[1] line $c[2])";
	}
	print STDERR $msg."\n";
	return undef;
} if 0; # set to 1 if you want to trace when modules are loaded

use strict;
use warnings;
eval 'require Devel::SawAmpersand';

# TODO: Check to make sure this path points to where the cgi-bin stuff is
use lib "/home/httpd/musicbrainz/mb_server/cgi-bin";

# Make sure we are in a sane environment.
$ENV{GATEWAY_INTERFACE} =~ /^CGI-Perl/
	or die "GATEWAY_INTERFACE not Perl!";

# cgi-bin/*.pl is run via Apache::Registry
require Apache::Registry;

require Apache::Session;
require DBI;
DBI->install_driver("Pg");

# Some of the MB modules defer loading ("require" instead of "use") for some
# modules.  If we know we're likely to want some module eventually, load it
# now.
require POSIX;
require IO::Socket::INET; # FreeDB
require OSSP::uuid; # TableBase
require Net::SMTP; # MusicBrainz::Server::Mail
require Time::ParseDate;

# Alphabetical order, for ease of maintenance
# (apart from DBDefs and ModDefs, which we'll load first, just to make sure)
require DBDefs;
require ModDefs;

require MusicBrainz::Server::Release;
require MusicBrainz::Server::Alias;
require MusicBrainz::Server::Artist;
require DebugLog;
require FreeDB;
require Insert;
require MusicBrainz::Server::Label;
require LocaleSaver;
# require MM;
# require MM_2_0;
# require MM_2_1;
require Moderation;
require MusicBrainz;
require MusicBrainz::Server::Annotation;
require MusicBrainz::Server::Attribute;
require MusicBrainz::Server::AutomodElection;
require MusicBrainz::Server::ReleaseCDTOC;
require MusicBrainz::Server::Cache;
require MusicBrainz::Server::CDTOC;
require MusicBrainz::Server::Collection;
require MusicBrainz::Server::CollectionInfo;
require MusicBrainz::Server::CollectionPreference;
require MusicBrainz::Server::Country;
require MusicBrainz::Server::CoverArt;
require MusicBrainz::Server::DateTime;
require MusicBrainz::Server::DeferredUpdate;
require MusicBrainz::Server::Handlers;
require MusicBrainz::Server::Language;
require MusicBrainz::Server::Link;
require MusicBrainz::Server::LinkAttr;
require MusicBrainz::Server::LinkEntity;
require MusicBrainz::Server::LinkType;
require MusicBrainz::Server::LogFile;
require MusicBrainz::Server::Mail;
require MusicBrainz::Server::Markup;
require MusicBrainz::Server::ModerationNote;
require MusicBrainz::Server::NewsFeed;
require MusicBrainz::Server::CDStub;
require MusicBrainz::Server::PagedReport;
require MusicBrainz::Server::Rating;
require MusicBrainz::Server::ReleaseEvent;
require MusicBrainz::Server::Replication;
require MusicBrainz::Server::Script;
require MusicBrainz::Server::Statistic;
require MusicBrainz::Server::Tag;
require MusicBrainz::Server::TRMGateway;
require MusicBrainz::Server::TRMGatewayHandler;
require MusicBrainz::Server::URL;
require MusicBrainz::Server::Vote;
require MusicBrainz::Server::Handlers::WS::1::Common;
require MusicBrainz::Server::WikiTransclusion;
require MusicBrainz::Server::Validation;
# Don't load MusicBrainz::Server::Moderation::* - Moderation.pm does that
require Parser;
require QuerySupport;
# require RDF2;
require SearchEngine;
require Sql;
require Style;
require TableBase;
require TaggerSupport;
require MusicBrainz::Server::Track;
require MusicBrainz::Server::PUID;
require UserPreference;
require UserStuff;
require UserSubscription;

require &DBDefs::MB_SERVER_ROOT . "/admin/depend.pl";

# Loading the Mason handler preloads the pages, so the other MusicBrainz
# modules must be ready by this point.
require MusicBrainz::Server::Mason;

# Preload Apache::Registry scripts
{
	use Apache::RegistryLoader ();
	my $r = Apache::RegistryLoader->new;
	$r->handler("/cgi-bin/$_", &DBDefs::MB_SERVER_ROOT."/cgi-bin/$_")
		for qw( mq.pl mq_2_1.pl rdf.pl rdf_2_1.pl );
}

# Mason will try to load these later, when $m->cache->... is used.
# Preload them.
require Cache::FileCache;
require HTML::Mason::Cache::BaseCache;

1;
# eof startup.pl
