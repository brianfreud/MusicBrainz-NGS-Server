[%- MACRO create_guideline(text) BLOCK -%]
    <li>
        [%- text -%]
    </li>
[%- END -%]
[%#- This next could use localization for alternating comma/period use per locale -%]
[%- MACRO add_commas(n) GET n.chunk(-3).join(',') -%]
[%- MACRO url_escape(url) BLOCK; url | url; END -%]
[%- MACRO html_escape(url) BLOCK; url | html; END -%]
[%- MACRO make_ucfirst(text) BLOCK; text | ucfirst; END -%]
[%- MACRO make_widget(field, label) INCLUDE 'forms/generic/row.tt' field=form.field(field) label=label -%]
[%- USE UserDate(c.user.preferences) -%]
[%- MACRO doc_link(to) BLOCK -%]
    [% c.uri_for('/doc', to) %]
[%- END -%]
[%- MACRO wiki_history_link(server, id, version) BLOCK -%]
http://[%- server -%]/[%- id -%]?oldid=[%- version -%]
[%- END -%]
[%- MACRO wiki_link(server, id) BLOCK -%]
http://[%- server -%]/[%- id -%]"
[%- END -%]
[%- MACRO l(text, args) BLOCK;
    c.gettext(text, args);
END; -%]
[%#- There is a bug in this implementation fo ngettext that is easier to fix by policy that's why it's not fixed yet.
The problem surfaces when an unfinished translation file is used, in this case a plural translation would 
apply language-specific plural construction rules to the untranslated english string. If a translation language has
more than two plural forms, then the first plural form (germanic plural) is chosen for every form other than the first
two. -%]
[%- MACRO ln(text, plural, num, args) BLOCK;
    c.ngettext(text, plural, num, args);
END; -%]
[%- MACRO entity_link(entity, noicon) IF entity -%]
    [%- mpclass = entity.has_mod_pending ? ' class="mp"' : '' -%]
    [%- IF entity.entity_type == "url" -%]
        <a href="[%- (entity.url || entity.name) -%]"[%- mpclass -%]>[%- (entity.name || entity.url) | truncate(53) | html -%]</a>
        [<a href="[%- c.entity_url(entity, 'info') -%]">[% l('info') %]</a>]
    [%- ELSE -%]
        [%- IF entity.id or entity.mbid -%]<a href="[%- c.entity_url(entity, 'show') -%]"[%- mpclass -%]>[%- END -%]
            [%- UNLESS noicon -%]<span class="[%- entity.entity_type -%]_icon">[%- END -%]
            [%- (entity.name || entity.sort_name) | html -%]
            [%- UNLESS noicon -%]</span>[%- END -%]
        [%- IF entity.id or entity.mbid -%]</a>[%- END -%]
        [%- IF entity.resolution -%] ([%- entity.resolution | html -%])[%- END -%]
    [%- END -%]
[%- END -%]
[%- MACRO comma_list(items) BLOCK -%]
    [%- FOREACH item IN items -%]
        [%- item -%]
        [%- loop.count == (loop.size - 1) ? " and " : !loop.last ? ", " : "" -%]
    [%- END -%]
[%- END -%]
[%- MACRO form_id(field)
    IF field.form;
        "form-" _ field.form.name _ "-" _ field.name.replace('_', '-');
    ELSE;
        "form-$field";
    END -%]
[%- MACRO class_html(classes)
    IF classes.size; 'class="' _ classes.join(' ') _ '"';
    ELSE; '';
    END -%]
[%#- Take type and return pluralized word form, avoids problems with '|% type %|s' -#%]
[%- MACRO get_plural_type(entity)
    SWITCH entity;
        CASE 'release';
            l('releases');
        CASE 'artist';
            l('artists');
        CASE 'label';
            l('labels');
        CASE 'track';
            l('tracks');
        CASE 'editor';
            l('editors');
        CASE DEFAULT;
            l('Error: Unknown Type');
    END -%]

[%- MACRO disambiguation(entity) BLOCK;
    '<span>' _ html_escape("(${entity.comment})") _ '</span>' IF entity.comment;
END -%]

[%- MACRO artist_credit(ac, opts) BLOCK -%]
    [%- FOREACH name IN ac.names -%]
        [%- opts.plain ? html_escape(name.name) : link_artist(name.artist) -%]
        [%- name.join_phrase | html -%]
    [%- END -%]
[%- END -%]

[%- MACRO link_entity(entity, action, text) BLOCK;
    type = "$entity";
    IF    type.search('Entity::Artist='); link_artist(entity, action, text);
    ELSIF type.search('Entity::Work='); link_work(entity, action, text);
    ELSIF type.search('Entity::Label='); link_label(entity, action, text);
    ELSIF type.search('Entity::Release='); link_release(entity, action, text);
    ELSIF type.search('Entity::ReleaseGroup='); link_release_group(entity, action, text);
    ELSIF type.search('Entity::Recording='); link_recording(entity, action, text);
    ELSIF type.search('Entity::URL='); link_url(entity, action, text);
    END;
END -%]

[%- MACRO link_work(work, action, text) BLOCK;
    action = action || 'show';
    link = c.uri_for_action("/work/$action", [ work.gid ]);
    text = text || html_escape(work.name);
    '<a href="' _ link _ '">' _ text _ '</a>';
END -%]

[%- MACRO link_label(label, action, text) BLOCK;
    action = action || 'show';
    link = c.uri_for_action("/label/$action", [ label.gid ]);
    text = text || html_escape(label.name);
    '<a href="' _ link _ '">' _ text _ '</a>';
END -%]

[%- MACRO link_artist(artist, action, text) BLOCK;
    action = action || 'show';
    link = c.uri_for_action("/artist/$action", [ artist.gid ]);
    text = text || html_escape(artist.name);
    '<a href="' _ link _ '">' _ text _ '</a>';
END -%]

[%- MACRO link_release(release, action, text) BLOCK;
    action = action || 'show';
    link = c.uri_for_action("/release/$action", [ release.gid ]);
    text = text || html_escape(release.name);
    '<a href="' _ link _ '">' _ text _ '</a>';
END -%]

[%- MACRO link_release_group(rg, action, text) BLOCK;
    action = action || 'show';
    link = c.uri_for_action("/release_group/$action", [ rg.gid ]);
    text = text || html_escape(rg.name);
    '<a href="' _ link _ '">' _ text _ '</a>';
END -%]

[%- MACRO link_recording(rg, action, text) BLOCK;
    action = action || 'show';
    link = c.uri_for_action("/recording/$action", [ rg.gid ]);
    text = text || html_escape(rg.name);
    '<a href="' _ link _ '">' _ text _ '</a>';
END -%]

[%- MACRO link_recording(recording, action, text) BLOCK;
    action = action || 'show';
    link = c.uri_for_action("/recording/$action", [ recording.gid ]);
    text = text || html_escape(recording.name);
    '<a href="' _ link _ '">' _ text _ '</a>';
END -%]

[%- MACRO link_tracklist(tracklist, action, text) BLOCK;
    action = action || 'show';
    link = c.uri_for_action("/tracklist/$action", [ tracklist.id ]);
    text = text || html_escape(tracklist.medium.name);
    '<a href="' _ link _ '">' _ text _ '</a>';
END -%]

[%- MACRO link_url(url, action, text) BLOCK;
    action = action || 'show';
    link = c.uri_for_action("/url/$action", [ url.gid ]);
    text = text || html_escape(url.url);
    '<a href="' _ url.url _ '">' _ text _ '</a> [<a href="' _ link _ '">' _ l('info') _ '</a>]';
END -%]

[%- MACRO link_editor(editor, action, text) BLOCK;
    action = action || 'profile';
    link = c.uri_for_action("/user/$action", editor.name);
    text = text || html_escape(editor.name);
    '<a href="' _ link _ '">' _ text _ '</a>';
END -%]

[%- MACRO request_login(text) BLOCK -%]
<a href="[% c.uri_for('/user/login', { uri => c.req.path }) %]">[% text || l('Log in') %]</a>
[%- END -%]
